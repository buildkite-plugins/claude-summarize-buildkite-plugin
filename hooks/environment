#!/bin/bash
set -o pipefail

# Load plugin bash library
DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
# shellcheck source=lib/plugin.bash
. "$DIR/../lib/plugin.bash"

# Get configuration
API_KEY=$(plugin_read_config API_KEY "")

# Function to resolve API key from various formats
resolve_api_key() {
  local key_value="$1"
  local resolved=""

  # Check if it's a command substitution pattern: $(buildkite-agent secret get SECRET_NAME)
  if [[ "$key_value" =~ ^\$\(buildkite-agent[[:space:]]+secret[[:space:]]+get[[:space:]]+(.+)\)$ ]]; then
    local secret_name="${BASH_REMATCH[1]}"
    echo "--- 🔑 Fetching API key from secret: $secret_name" >&2

    if command -v buildkite-agent >/dev/null 2>&1; then
      if resolved=$(buildkite-agent secret get "$secret_name" 2>/dev/null) && [[ -n "$resolved" ]]; then
        echo "Successfully fetched API key from secret" >&2
        echo "$resolved"
        return 0
      else
        echo "⚠️ Warning: Failed to fetch API key from secret: $secret_name" >&2
        return 1
      fi
    else
      echo "⚠️ Warning: buildkite-agent command not available, cannot fetch secret" >&2
      return 1
    fi

  # Check if it's an environment variable pattern: ${VAR_NAME}
  elif [[ "$key_value" =~ ^\$\{(.+)\}$ ]]; then
    local var_name="${BASH_REMATCH[1]}"
    echo "--- 🔑 Resolving API key from environment variable: $var_name" >&2

    if [[ -n "${!var_name:-}" ]]; then
      echo "Successfully resolved API key from environment variable" >&2
      echo "${!var_name}"
      return 0
    else
      echo "⚠️ Warning: Environment variable $var_name is not set or empty" >&2
      return 1
    fi

  # Check if it's an environment variable pattern: $VAR_NAME
  elif [[ "$key_value" =~ ^\$([A-Za-z_][A-Za-z0-9_]*)$ ]]; then
    local var_name="${BASH_REMATCH[1]}"
    echo "--- 🔑 Resolving API key from environment variable: $var_name" >&2

    if [[ -n "${!var_name:-}" ]]; then
      echo "Successfully resolved API key from environment variable" >&2
      echo "${!var_name}"
      return 0
    else
      echo "⚠️ Warning: Environment variable $var_name is not set or empty" >&2
      return 1
    fi

  # Otherwise, treat it as a literal value
  else
    echo "$key_value"
    return 0
  fi
}

# Process API_KEY if provided
if [[ -n "$API_KEY" ]]; then
  if resolved_key=$(resolve_api_key "$API_KEY" 2>&1) && [[ -n "$resolved_key" ]]; then
    export BUILDKITE_PLUGIN_CLAUDE_CODE_API_KEY="$resolved_key"
  fi
fi

# Always return success so the build continues
true
